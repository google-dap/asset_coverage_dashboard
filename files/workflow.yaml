# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

main:
  params: []
  steps:
    - init:
        assign:
          - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - ads_config_path: gs://agency-assets/google-ads.yaml
          - account_script_path: gs://agency-assets/scripts/get_account_list.sql
          - account_script_bq_path: gs://agency-assets/scripts/process_account_list.sql
          - dataset_location: ${sys.get_env("AGENCY_ASSETS_DATASET_LOCATION")}
          - dataset: "agency_assets_raw"
          - computed_dataset: "agency_assets"
          - location: ${sys.get_env("AGENCY_ASSETS_REGION")}
          - customer_id: ${sys.get_env("AGENCY_ASSETS_CID")}
          - auth_key: ${sys.get_env("AGENCY_ASSETS_YOUTUBE_KEY")}
    - get_account_list:
        call: googleapis.run.v2.projects.locations.jobs.run
        args:
          name: ${"projects/" + project_id + "/locations/" + location + "/jobs/gaarf"}
          body:
            overrides:
              timeout: "3600s"
              containerOverrides:
                args:
                  - --ads-config
                  - ${ads_config_path}
                  - --customer-id
                  - ${customer_id}
                  - --output
                  - bq
                  - --bq.project
                  - ${project_id}
                  - --bq.dataset
                  - ${dataset}
                  - --bq.location
                  - ${dataset_location}
                  - ${account_script_path}
    - format_account_list:
        call: googleapis.run.v2.projects.locations.jobs.run
        args:
          name: ${"projects/" + project_id + "/locations/" + location + "/jobs/gaarf-bq"}
          body:
            overrides:
              timeout: "3600s"
              containerOverrides:
                args:
                  - --project
                  - ${project_id}
                  - --dataset-location
                  - ${dataset_location}
                  - --macro.destination_dataset
                  - ${computed_dataset}
                  - --macro.source_dataset
                  - ${dataset}
                  - ${account_script_bq_path}
        result: gaarf_bq_execution
    - retrieve_account_list:
        call: googleapis.bigquery.v2.jobs.query
        args:
            projectId: ${project_id}
            body:
                connectionProperties: []
                defaultDataset:
                    datasetId: ${computed_dataset}
                    projectId: ${project_id}
                location: ${dataset_location}
                query: "SELECT customer_id FROM account_list ORDER BY customer_id;"
        result: account_list_result
    - process_account_list_query:
        assign:
          - accounts: []
          - account_query_raw: ${account_list_result.rows}
    - loop_query_results:
        for:
          value: result
          in: ${account_query_raw}
          steps:
            - append_to_list:
                assign:
                  - accounts: ${list.concat(accounts, result.f[0].v)}
    - log_accounts:
        call: sys.log
        args:
          data: ${accounts}
    - perform_ads_queries_loop:
        parallel:
          concurrency_limit: 50
          for:
            value: account
            in: ${accounts}
            steps:
              - demand_gen_assets:
                  call: googleapis.run.v2.projects.locations.jobs.run
                  args:
                    name: ${"projects/" + project_id + "/locations/" + location + "/jobs/gaarf"}
                    body:
                      overrides:
                        timeout: "3600s"
                        containerOverrides:
                          args:
                            - --ads-config
                            - ${ads_config_path}
                            - --disable-account-expansion
                            - --customer-id
                            - ${account}
                            - --output
                            - bq
                            - --bq.project
                            - ${project_id}
                            - --bq.dataset
                            - ${dataset}
                            - --bq.location
                            - ${dataset_location}
                            - gs://agency-assets/scripts/ads/demand_gen_campaign_assets.sql
              - carousel_image_assets:
                  call: googleapis.run.v2.projects.locations.jobs.run
                  args:
                    name: ${"projects/" + project_id + "/locations/" + location + "/jobs/gaarf"}
                    body:
                      overrides:
                        timeout: "3600s"
                        containerOverrides:
                          args:
                            - --ads-config
                            - ${ads_config_path}
                            - --disable-account-expansion
                            - --customer-id
                            - ${account}
                            - --output
                            - bq
                            - --bq.project
                            - ${project_id}
                            - --bq.dataset
                            - ${dataset}
                            - --bq.location
                            - ${dataset_location}
                            - gs://agency-assets/scripts/ads/carousel_image_assets.sql
              - video_campaigns:
                  call: googleapis.run.v2.projects.locations.jobs.run
                  args:
                    name: ${"projects/" + project_id + "/locations/" + location + "/jobs/gaarf"}
                    body:
                      overrides:
                        timeout: "3600s"
                        containerOverrides:
                          args:
                            - --ads-config
                            - ${ads_config_path}
                            - --disable-account-expansion
                            - --customer-id
                            - ${account}
                            - --output
                            - bq
                            - --bq.project
                            - ${project_id}
                            - --bq.dataset
                            - ${dataset}
                            - --bq.location
                            - ${dataset_location}
                            - gs://agency-assets/scripts/ads/video_campaigns.sql
              - video_assets:
                  call: googleapis.run.v2.projects.locations.jobs.run
                  args:
                    name: ${"projects/" + project_id + "/locations/" + location + "/jobs/gaarf"}
                    body:
                      overrides:
                        timeout: "3600s"
                        containerOverrides:
                          args:
                            - --ads-config
                            - ${ads_config_path}
                            - --disable-account-expansion
                            - --customer-id
                            - ${account}
                            - --output
                            - bq
                            - --bq.project
                            - ${project_id}
                            - --bq.dataset
                            - ${dataset}
                            - --bq.location
                            - ${dataset_location}
                            - gs://agency-assets/scripts/ads/video_assets.sql
              - link_mapping:
                  call: googleapis.run.v2.projects.locations.jobs.run
                  args:
                    name: ${"projects/" + project_id + "/locations/" + location + "/jobs/gaarf"}
                    body:
                      overrides:
                        timeout: "3600s"
                        containerOverrides:
                          args:
                            - --ads-config
                            - ${ads_config_path}
                            - --disable-account-expansion
                            - --customer-id
                            - ${account}
                            - --output
                            - bq
                            - --bq.project
                            - ${project_id}
                            - --bq.dataset
                            - ${dataset}
                            - --bq.location
                            - ${dataset_location}
                            - gs://agency-assets/scripts/ads/link_mapping.sql
              - customer_info:
                  call: googleapis.run.v2.projects.locations.jobs.run
                  args:
                    name: ${"projects/" + project_id + "/locations/" + location + "/jobs/gaarf"}
                    body:
                      overrides:
                        timeout: "3600s"
                        containerOverrides:
                          args:
                            - --ads-config
                            - ${ads_config_path}
                            - --disable-account-expansion
                            - --customer-id
                            - ${account}
                            - --output
                            - bq
                            - --bq.project
                            - ${project_id}
                            - --bq.dataset
                            - ${dataset}
                            - --bq.location
                            - ${dataset_location}
                            - gs://agency-assets/scripts/ads/customer.sql
    - create_union_views:
        for:
          value: table
          in: ["demand_gen_campaign_assets", "carousel_image_assets", "link_mapping", "video_assets", "video_campaigns"]
          steps:
            - recreate_view:
                call: googleapis.run.v2.projects.locations.jobs.run
                args:
                  name: ${"projects/" + project_id + "/locations/" + location + "/jobs/gaarf-bq"}
                  body:
                    overrides:
                      containerOverrides:
                        args:
                          - --project
                          - ${project_id}
                          - --dataset-location
                          - ${dataset_location}
                          - --macro.dataset
                          - ${dataset}
                          - --macro.table
                          - ${table}
                          - --macro.accounts
                          # fun hack to turn an actual array into a comma separated list
                          - ${text.substring(json.encode_to_string(accounts), 1, -1)}
                          - gs://agency-assets/scripts/postprocess/recreate_union_views.sql

    - check_for_video_data_table:
        try:
          steps:
            - get_video_data_table:
                call: googleapis.bigquery.v2.tables.get
                args:
                  datasetId: ${dataset}
                  projectId: ${project_id}
                  tableId: video_aspect_ratios
                result: get_table_result
            - log_get_table_result:
                call: sys.log
                args:
                  data: ${get_table_result}
        except:
          as: exception
          steps:
            - not_found:
                switch:
                  - condition: ${not("HttpError" in exception.tags)}
                    raise: ${exception}
                  - condition: ${exception.code == 404}
                    steps:
                      - truncate_video_data_table:
                          call: googleapis.bigquery.v2.jobs.insert
                          args:
                            projectId: ${project_id}
                            body:
                              configuration:
                                query:
                                  query: SELECT "xxxx" AS video_id, "xyz" AS embedHtml, -1 AS embedHeight, -1 AS embedWidth
                                  destinationTable:
                                    projectId: ${project_id}
                                    datasetId: ${dataset}
                                    tableId: video_aspect_ratios
                                  create_disposition: "CREATE_IF_NEEDED"
                                  useLegacySql: false
                  - condition: true
                    raise: ${exception}

    - accumulate_video_ids:
        call: googleapis.bigquery.v2.jobs.query
        args:
            projectId: ${project_id}
            body:
                connectionProperties: []
                defaultDataset:
                    datasetId: ${dataset}
                    projectId: ${project_id}
                location: ${dataset_location}
                query: "SELECT video_id FROM video_assets WHERE video_id IS NOT NULL AND video_id NOT IN (SELECT video_id FROM video_aspect_ratios) ORDER BY video_id;"
                useLegacySql: false
        result: video_id_list_result
    - process_video_id_list_query:
        assign:
          - video_id_query_raw: ${video_id_list_result.rows}
    - batch_process_youtube:
        for:
          value: batch
          range: ${[0, (len(video_id_query_raw) // 500) + math.min(1, len(video_id_query_raw) % 500)]}
          steps:
            - init_sub_array:
                assign:
                  - video_id_results: []
            - run_batch_in_parallel:
                parallel:
                  concurrency_limit: 100
                  shared: [video_id_results]
                  for:
                    value: batch_index
                    range: [0, 500]
                    steps:
                      - get_video_id:
                          switch:
                            - condition: ${batch * 500 + batch_index < len(video_id_query_raw)}
                              steps:
                                  - extract_video_id:
                                      assign:
                                        - video_id: ${video_id_query_raw[batch * 500 + batch_index].f[0].v}
                                  - call_youtube_embed_api:
                                      try:
                                        call: http.get
                                        args:
                                          url: 'https://www.googleapis.com/youtube/v3/videos'
                                          timeout: 20
                                          headers:
                                            "Accept": "application/json"
                                          query:
                                            "part": "player"
                                            "id": ${video_id}
                                            "maxWidth": "1920"
                                            "maxHeight": "1920"
                                            "key": ${auth_key}
                                        result: x
                                      retry:
                                        predicate: ${custom_http_retry_predicate}
                                        max_retries: 3
                                        backoff:
                                          initial_delay: 2
                                          max_delay: 60
                                          multiplier: 2
                                  - record_result:
                                      switch:
                                        - condition: ${len(default(x.body.items, [])) > 0}
                                          steps:
                                              - format_result:
                                                  assign:
                                                    - row_result: {}
                                                    - row_result.insertId: ${video_id + "_insert_video"}
                                                    - row_result.json: ${x.body.items[0].player}
                                                    - row_result.json.video_id: ${x.body.items[0].id}
                                              - append_video_result:
                                                  assign:
                                                    - video_id_results: ${list.concat(video_id_results, row_result)}
            - log_insert_data:
                call: sys.log
                args:
                  data: ${video_id_results}
            - insert_video_data:
                switch:
                  - condition: ${len(video_id_results) > 0}
                    steps:
                      - perform_insert:
                          try:
                            call: googleapis.bigquery.v2.tabledata.insertAll
                            args:
                                projectId: ${project_id}
                                datasetId: ${dataset}
                                tableId: video_aspect_ratios
                                body:
                                    rows: ${video_id_results}
                            result: insertAllResult
                          retry:
                            predicate: ${custom_bqinsert_retry_predicate}
                            max_retries: 3
                            backoff:
                              initial_delay: 60
                              max_delay: 600
                              multiplier: 2
                      - finish_batch:
                          call: sys.log
                          args:
                            data: ${insertAllResult}

    - perform_bq_post_processing:
        for:
          value: script
          in: ["compute_video_aspect_ratios"]
          steps:
            - run_bq_script:
                call: googleapis.run.v2.projects.locations.jobs.run
                args:
                  name: ${"projects/" + project_id + "/locations/" + location + "/jobs/gaarf-bq"}
                  body:
                    overrides:
                      containerOverrides:
                        args:
                          - --project
                          - ${project_id}
                          - --dataset-location
                          - ${dataset_location}
                          - --macro.source_dataset
                          - ${dataset}
                          - --macro.destination_dataset
                          - ${computed_dataset}
                          - --macro.asset_table
                          - video_assets
                          - --macro.aspect_table
                          - video_aspect_ratios
                          - ${"gs://agency-assets/scripts/postprocess/" + script + ".sql"}
    - generate_demand_gen_report:
        call: googleapis.run.v2.projects.locations.jobs.run
        args:
          name: ${"projects/" + project_id + "/locations/" + location + "/jobs/gaarf-bq"}
          body:
            overrides:
              containerOverrides:
                args:
                  - --project
                  - ${project_id}
                  - --dataset-location
                  - ${dataset_location}
                  - --macro.raw_dataset
                  - ${dataset}
                  - --macro.dataset
                  - ${computed_dataset}
                  - gs://agency-assets/scripts/postprocess/demand_gen_asset_coverage.sql
    - generate_video_campaign_report:
        call: googleapis.run.v2.projects.locations.jobs.run
        args:
          name: ${"projects/" + project_id + "/locations/" + location + "/jobs/gaarf-bq"}
          body:
            overrides:
              containerOverrides:
                args:
                  - --project
                  - ${project_id}
                  - --dataset-location
                  - ${dataset_location}
                  - --macro.raw_dataset
                  - ${dataset}
                  - --macro.dataset
                  - ${computed_dataset}
                  - gs://agency-assets/scripts/postprocess/video_campaign_asset_coverage.sql
    - finish:
        return: "Yay"

custom_http_retry_predicate:
  params: [e]
  steps:
    - log_http_error:
        call: sys.log
        args:
          data: ${e}
          severity: "WARNING"
    - normalize_fields:
        assign:
          - tags: ${default(map.get(e, "tags"), [])}
          - code: ${default(map.get(e, "code"),0)}
    - what_to_repeat:
        switch:
          # We'll repeat if it's a ConnectionError, TimeoutError or http statuses:
          #   429 - Too Many Requests
          #   502 - Bad Gateway
          #   503 - Service Unavailable
          #   504 - Gateway Timeout
          # NOTE: sometime errors happen inside Workflow and there's no any code
          # (i.e. "code" can be null, so DO NOT use operand ==,<,>,>=,<= without wrapping with `default`
          - condition: ${"ConnectionFailedError" in tags or "ConnectionError" in tags or "TimeoutError" in tags or code == 429 or code == 502 or code == 503 or code == 504}
            return: true
    - otherwise:
        return: false

custom_bqinsert_retry_predicate:
  params: [e]
  steps:
    - log_bq_error:
        call: sys.log
        args:
          data: ${e}
          severity: "WARNING"
    - normalize_fields:
        assign:
          - tags: ${default(map.get(e, "tags"), [])}
          - code: ${default(map.get(e, "code"),0)}
    - what_to_repeat:
        switch:
          # We'll repeat if it's a ConnectionError, TimeoutError or http statuses:
          #   404 - This is specific to this BQ flow since it may come back as TRUNCATE still
          #   429 - Too Many Requests
          #   502 - Bad Gateway
          #   503 - Service Unavailable
          #   504 - Gateway Timeout
          # NOTE: sometime errors happen inside Workflow and there's no any code
          # (i.e. "code" can be null, so DO NOT use operand ==,<,>,>=,<= without wrapping with `default`
          - condition: ${"ConnectionFailedError" in tags or "ConnectionError" in tags or "TimeoutError" in tags or code == 429 or code == 502 or code == 503 or code == 504}
            return: true
    - otherwise:
        return: false
